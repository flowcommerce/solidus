#!/usr/bin/env ruby

require 'thor'
require 'dotenv'
require 'awesome_print'
require 'colorize'

Dotenv.load

def Thor.define name, desc, &block
  block ||= -> { Cli.bash name }

  Thor.desc name, desc
  Thor.send :define_method, name, &block
end

module Cli
  extend self

  def run command
    command = command.gsub(/\$([A-Z_]+)/) { ENV[$1] }
    puts command.green
    system command
  end

  def bash name
    run 'bash bin/bash/%s' % name
  end

  def remote command
    run %[ssh -t $PRODUCTION_SERVER "cd $PRODUCTION_PATH; echo '$PRODUCTION_PASS' | sudo -S echo; %s"] % command
  end
end

###

class Remote < Thor
  define :assets, 'Deploy js and css assets to production'
  define :deploy, 'Deploy app to production'
  define :get_db, 'Get and load production database'

  define :check, 'Check ENV' do
    for name in [:DB_NAME, :PRODUCTION_SERVER, :PRODUCTION_PATH, :PRODUCTION_PASS, :PRODUCTION_DB_NAME, :PRODUCTION_DB_USER, :PRODUCTION_DB_PASS]
      puts '%s - %s' % [name.to_s.ljust(20), ENV.fetch(name.to_s)]
    end
  end

  define :bash, 'Get production bash' do
    Cli.remote 'bash;'
  end

  define :cli, 'Get production app cli' do
    Cli.remote '~/.rbenv/shims/ruby lux/bin/lux c'
  end

  define :psql, 'get psql cli for remote db' do
    puts '\l - list databases'
    puts '\q - quit'
    Cli.remote 'sudo -u postgres psql -d %s' % ENV.fetch('PRODUCTION_DB_NAME')
  end

  define :restart, 'Restart services' do
    Cli.remote 'service memcached restart; service nginx restart'
  end

  desc 'upload FILE', 'Upload file to production server'
  def upload name
    Cli.run 'scp "%s" $PRODUCTION_SERVER:~' % name
    Cli.remote 'ls -al; bash'
  end
end

Remote.start(ARGV)