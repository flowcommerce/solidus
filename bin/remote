#!/usr/bin/env ruby

require 'thor'
require 'dotenv'
require 'awesome_print'
require 'colorize'

Dotenv.load

def Thor.define name, desc, &block
  block ||= -> { Cli.bash name }

  Thor.desc name, desc
  Thor.send :define_method, name, &block
end

module Cli
  extend self

  def run command
    command = command.gsub(/\$([A-Z_]+)/) { ENV[$1] }
    puts command.green
    system command
  end

  def bash name
    run 'bash bin/bash/%s' % name
  end

  def remote command
    run %[ssh -t $REMOTE_SERVER "cd $REMOTE_PATH; echo '$REMOTE_PASS' | sudo -S echo; %s"] % command
  end
end

###

class Remote < Thor
  define :deploy, 'Deploy app to production'

  define :check, 'Check ENV' do
    for name in [:REMOTE_SERVER, :REMOTE_PATH, :REMOTE_PASS]
      puts '%s - %s' % [name.to_s.ljust(20), ENV.fetch(name.to_s)]
    end
  end

  define :bash, 'Get production bash' do
    Cli.remote 'bash;'
  end

  define :cli, 'Get production app cli' do
    Cli.remote 'rails c'
  end

  define :restart, 'Restart services' do
    Cli.remote 'service memcached restart; service nginx restart'
  end

  desc 'upload FILE', 'Upload file to production server'
  def upload name
    Cli.run 'scp "%s" $REMOTE_SERVER:~' % name
    Cli.remote 'ls -al; bash'
  end

  define :sync_to_s3, 'Sync public public folder to S3' do
    Cli.run 'aws s3 sync ./public s3://io.flow.solidus-s3 --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers --region us-east-1'
  end
end

Remote.start(ARGV)