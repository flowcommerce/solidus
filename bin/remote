#!/usr/bin/env ruby

require 'thor'
require 'dotenv'
require 'awesome_print'
require 'colorize'
require 'pathname'

Dotenv.load

def Thor.define name, desc, &block
  block ||= -> { Cli.bash name }

  Thor.desc name, desc
  Thor.send :define_method, name, &block
end

module Cli
  extend self

  def run command
    command = command.gsub(/\$([A-Z_]+)/) { ENV[$1] }
    puts command.green
    system command
  end

  def bash name
    run 'bash bin/bash/%s' % name
  end

  def remote command
    run %[ssh -t $REMOTE_SERVER "cd $REMOTE_PATH; echo '$REMOTE_PASS' | sudo -S echo; %s"] % command
  end

  def die text
    puts text.red
    exit
  end
end

module FixAssetPaths
  extend self

  def find_and_fix
    css_files = Dir['./public/**/*.css']
    css_files.each { |it| modify_asset_root_in_place(it) }
  end

  def modify_asset_root_in_place file
    puts 'Fixings assets paths: %s' % file.green

    asset_root = ENV.fetch('RAILS_ASSET_HOST')
    asset      = Pathname.new file
    data       = asset.read

    data       = data.gsub %r{url\(/}, 'url(%s/' % asset_root
    data       = data.gsub(%r{url\((['"])/}) { 'url(%s%s/' % [$1, asset_root] }

    asset.write data
  end

end


###

class Remote < Thor
  define :deploy, 'Deploy app to production'

  define :check, 'Check ENV' do
    for name in [:REMOTE_SERVER, :REMOTE_PATH, :REMOTE_PASS]
      puts '%s - %s' % [name.to_s.ljust(20), ENV.fetch(name.to_s)]
    end
  end

  define :bash, 'Get production bash' do
    Cli.remote 'bash;'
  end

  define :cli, 'Get production app cli' do
    Cli.remote 'rails c'
  end

  define :restart, 'Restart services' do
    Cli.remote 'service memcached restart; service nginx restart'
  end

  desc 'upload FILE', 'Upload file to production server'
  def upload name
    Cli.run 'scp "%s" $REMOTE_SERVER:~' % name
    Cli.remote 'ls -al; bash'
  end

  define :sync_to_s3, 'Sync public public folder to S3' do
    # compile assets in production mode
    Cli.run 'RAILS_ENV=production bundle exec rake assets:clean && rake assets:precompile'

    # ensure we have backup manifest file
    manifests = Dir['./public/assets/.sprockets-manifest-*']
    Cli.die 'Manifest file not found?' unless manifests.first
    Cli.die '%d manifests found!' % manifests.length if manifests.length > 1

    # copy manifest file to public folder so Docker can see it and
    # copy it to public/assets on build
    Cli.run 'rm public/.sprockets-manifest*'
    Cli.run 'cp public/assets/.sprockets-manifest* public/'

    # fix bad asset paths in css files (Solidus bug)
    FixAssetPaths.find_and_fix

    # upload to S3
    Cli.run "AWS_PROFILE=flowcommerce aws s3 sync ./public s3://io.flow.aws-s3-public/assets/solidus --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers --region us-east-1"
  end
end

Remote.start(ARGV)