#!/usr/bin/env ruby

# cli access to flow api
# example
#  bin/flow organizations -> shoud show organizations you can access

# curl -X PUT -H "Content-Type: application/json" -H "Authorization: Basic SkFReTRGM1NrR1VTa000NnBqVjRPdUZDc0ZFaWlYd1hlSlNlVVQzc2JsUFo4U1lPZk9lMXJta2I0V3piUXk3T21IZ3RNVGVncUIxTjVONkFubDVRT0FkWVlyekRLSlpZUDM1aGQ2bG5PdHgxS2ZJTkRtd1FndzJMMlZoUHBMV3U6" -H "Cache-Control: no-cache" -d '{"number":"sku-2","name":"Slim Fit Denim","description":"Made from premium denim, these casual, do-anything, go-anywhere jeans are cut with a classic five-pocket design and offered in an array of washes.","locale":"en_US","price":120.0,"currency":"USD","categories":["Apparel","Jeans"],"attributes":{"color":"blue","size":"2","countries_of_origin":"CHN USA","product_id":"style-abc","gender":"male"},"images":[{"url":"http://lorempixel.com/300/400/"},{"url":"http://lorempixel.com/100/100/","tags":["thumbnail"]}],"dimensions":{"package":{"weight":{"value":"1.5","units":"pound"},"length":{"value":"18","units":"inch"},"width":{"value":"18","units":"inch"},"height":{"value":"1","units":"foot"}},"product":{"weight":{"value":"1","units":"pound"},"diameter":{"value":"12","units":"inch"}}}}' "https://api.flow.io/solidus-demo-sandbox/catalog/items/sku-2"

# {
#   "number": "sku-2",
#   "name": "Slim Fit Denim",
#   "locale": "en_US",
#   "description": "Made from premium denim, these casual, do-anything",
#   "price": 120.00,
#   "currency": "USD",
#   "categories": ["Apparel", "Jeans"],
#   "images": [{ "url": "http://lorempixel.com/300/400/" }]
# }

require 'dotenv'
require 'json'
require 'awesome_print'

Dotenv.load

###

def die(desc)
  puts desc.red
  exit
end

def flow_api(method_name)

end

###

params = {}
ARGV.each_with_index do |el, i|
  if el[0,2] == '--'
    value = ARGV[i + 1]
    value = true if !value || value[0,2] == '--'
    params[el.split('--',2)[1]] = value
  end
end

###

methods = {}
methods[:exp_all]      = { path: '/%o/experiences',        method: :get, desc: 'get epxpiriences' }
methods[:exp_show]     = { path: '/%o/experiences/:key',   method: :get, desc: 'get experience (--key)' }
methods[:set_cat_item] = { path: '/%o/catalog/items/:sku', method: :put, desc: 'update catalog item', json: true, body: true }

unless ARGV[0]
  puts "Usage:\n bin/flow method\n bin/flow method --sku CUSTOM-123 --body '{...}'\n\n"
  for k, v in methods
    puts '%s: %s - (%s)' % [k.to_s.ljust(20), v[:path], v[:desc]]
  end
  exit
end

opts = methods[ARGV[0].to_sym] || die('method %s not found' % ARGV[0])

path = opts[:path].gsub('%o', ENV.fetch('FLOW_ORGANIZATION'))
path.gsub!(/:(\w+)/) {
  die "Opt --#{$1} not defined" unless params[$1]
  params[$1]
}

curl  = 'curl -i -s -X %s -u %s: ' % [opts[:method].to_s.upcase, Flow.api_key]
curl += '-H "Content-Type: application/json" ' if opts[:json]
curl += 'https://api.flow.io%s' % path

time = Time.now
puts curl.blue
lines = `#{curl} 2>&1`.split("\n")
last_line = lines.pop

puts 'Speed: %ss, %sms' % (Time.now - time).to_s.split('.')
puts
puts lines.join("\n")

ap JSON.parse(last_line) rescue nil

